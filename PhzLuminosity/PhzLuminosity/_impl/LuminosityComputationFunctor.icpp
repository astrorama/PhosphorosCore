/*
 * LuminosityComputationFunctor.h
 *
 *  Created on: Aug 3, 2015
 *      Author: fdubath
 */




namespace Euclid {
namespace PhzLuminosity {


  template< typename ScaleFactor, typename ModelPhotometryGrid, typename SourcePhotometry>
  double LuminosityComputationFunctor::operator()(const GridCoordinate& gridCoordinate,
      const ScaleFactor& scaleFactor,
      const SourcePhotometry&,
      const ModelPhotometryGrid & modelPhotometryGrid) {


    auto model_iter = modelPhotometryGrid.begin();
    model_iter.template fixAxisByValue<PhzDataModel::ModelParameter::Z>(0.);
    model_iter.template fixAxisByValue<PhzDataModel::ModelParameter::EBV>(gridCoordinate.ebv);
    model_iter.template fixAxisByValue<PhzDataModel::ModelParameter::REDDENING_CURVE>(gridCoordinate.reddening_curve);
    model_iter.template fixAxisByValue<PhzDataModel::ModelParameter::SED>(gridCoordinate.sed);

    auto flux = model_iter->find(m_luminosity_filter.qualifiedName());
    if (flux==nullptr){
      throw Elements::Exception() << "The luminosity filter " << m_luminosity_filter.qualifiedName() << " is not defined for the model";
    }

    return -2.5 * std::log10(flux->flux*scaleFactor) - m_cosmology.DistanceModulus(gridCoordinate.z);
  }

}
}
