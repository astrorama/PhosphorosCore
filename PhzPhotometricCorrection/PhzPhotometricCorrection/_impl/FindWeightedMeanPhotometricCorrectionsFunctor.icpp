/** 
 * @file FindWeightedMeanPhotometricCorrectionsFunctor.h
 * @date January 23, 2015
 * @author Nikolaos Apostolakos
 */

#include <set>
#include <cmath>
#include "ElementsKernel/Logging.h"

namespace Euclid {
namespace PhzPhotometricCorrection {

static Elements::Logging weightedMeanlogger = Elements::Logging::getLogger("FindWeightedMeanPhotometricCorrectionsFunctor");

template <typename SourceIter>
  PhzDataModel::PhotometricCorrectionMap FindWeightedMeanPhotometricCorrectionsFunctor::operator()(
            const std::map<
                typename PhzUtils::SourceIterTraits<SourceIter>::id_type,
                PhzDataModel::PhotometricCorrectionMap>& source_phot_corr_map,
            SourceIter source_begin, SourceIter source_end) {
  std::map<typename PhzUtils::SourceIterTraits<SourceIter>::id_type,
      PhzDataModel::PhotometricCorrectionMap> source_weights_map {};

  for (auto source = source_begin; source != source_end; ++source) {
    auto source_phot_ptr = source->template getAttribute<SourceCatalog::Photometry>();
    PhzDataModel::PhotometricCorrectionMap source_weights {};
    for (auto iter=source_phot_ptr->begin(); iter!=source_phot_ptr->end(); ++iter) {
      if (!(*iter).missing_photometry_flag && !(*iter).upper_limit_flag) {
        source_weights[iter.filterName()] = (*iter).flux / (*iter).error;
      } else {
        source_weights[iter.filterName()] = NAN;
      }
    }
    source_weights_map[source->getId()] = std::move(source_weights);
  }
  
  PhzDataModel::PhotometricCorrectionMap result {};
  PhzDataModel::PhotometricCorrectionMap total_weights {};
  bool first = true;
  for (auto& source_phot_corr_pair : source_phot_corr_map) {
    if (first) {
      for (auto& phot_corr_pair : source_phot_corr_pair.second) {
        result[phot_corr_pair.first] = 0.;
        total_weights[phot_corr_pair.first] = 0.;
      }
      first = false;
    }
    for (auto& phot_corr_pair : source_phot_corr_pair.second) {
      double weight = source_weights_map.at(source_phot_corr_pair.first).at(phot_corr_pair.first);
      if (std::isfinite(weight)) {
        result[phot_corr_pair.first] += phot_corr_pair.second * weight;
        total_weights[phot_corr_pair.first] += weight;
      }
    }
  }
  for (auto& pair : result) {
    if ( total_weights[pair.first] == 0) {
      weightedMeanlogger.warn()<< "The photometry band " << pair.first << " has no reliable source. Set the correction to 1";
      pair.second = 1.0;
    } else {
      pair.second /= total_weights[pair.first];
    }
  }
  return result;
}

} // end of namespace PhzPhotometricCorrection
} // end of namespace Euclid
