/*
 * FindMedianPhotometricCorrectionsFunctor.icpp
 *
 *  Created on: Jan 22, 2015
 *      Author: fdubath
 */

#ifndef FINDMEDIANPHOTOMETRICCORRECTIONSFUNCTOR_ICPP
#define FINDMEDIANPHOTOMETRICCORRECTIONSFUNCTOR_ICPP


#include <map>
#include <cmath>
#include <set>
#include "SourceCatalog/SourceAttributes/Photometry.h"
#include "PhzDataModel/PhotometricCorrectionMap.h"
#include "ElementsKernel/Logging.h"

namespace Euclid {
namespace PhzPhotometricCorrection {

static Elements::Logging MedianCorrFunctorlogger = Elements::Logging::getLogger("FindMedianPhotometricCorrectionsFunctor");

template <typename SourceIter>
  PhzDataModel::PhotometricCorrectionMap FindMedianPhotometricCorrectionsFunctor::operator()(
      const std::map<typename PhzUtils::SourceIterTraits<SourceIter>::id_type, PhzDataModel::PhotometricCorrectionMap>& source_phot_corr_map,
      SourceIter, SourceIter){
  // Order the photometries for each filter, by storring them in multisets
    std::map<XYDataset::QualifiedName, std::multiset<double>> ordered_source_phot_corr;
    bool first = true;
    for (auto& source_phot_corr_pair : source_phot_corr_map) {
      if (first) {
           for (auto& phot_corr_pair : source_phot_corr_pair.second) {
             ordered_source_phot_corr[phot_corr_pair.first]={};
           }
           first = false;
      }
      for (auto& phot_corr_pair : source_phot_corr_pair.second) {
        if (!std::isnan(phot_corr_pair.second)){
          ordered_source_phot_corr[phot_corr_pair.first].insert(phot_corr_pair.second);
        }
      }
    }

    // Calculate the median for each filter
    PhzDataModel::PhotometricCorrectionMap result {};
    for (auto& pair : ordered_source_phot_corr) {
      size_t size = pair.second.size();
      if ( size == 0) {
            MedianCorrFunctorlogger.warn()<< "The photometry band " << pair.first << " has no reliable source. It will not be fitted.";
            result[pair.first] = 1.0;
       } else {
            double median = (size % 2 == 0)
                            ? (*std::next(pair.second.begin(), size/2 - 1) + *std::next(pair.second.begin(), size/2)) / 2
                            : *std::next(pair.second.begin(), size/2);
            result[pair.first] = median;
       }
    }
    return result;
}

} // end of namespace PhzPhotometricCorrection
} // end of namespace Euclid


#endif /* FINDMEDIANPHOTOMETRICCORRECTIONSFUNCTOR_ICPP */


