/**
 * @file PhzPhotometricCorrection/src/lib/CalculateScaleFactorMap.cpp
 * @date Jan 14, 2015
 * @author Florian Dubath
 */


#ifndef CALCULATESCALEFACTORMAP_ICPP
#define CALCULATESCALEFACTORMAP_ICPP


#include "SourceCatalog/SourceAttributes/Photometry.h"

namespace Euclid {
namespace PhzPhotometricCorrection {



CalculateScaleFactorMap::CalculateScaleFactorMap(
    CalculateScaleFactorMap::ScaleFactorCalc scaleFactorFunction)
: m_scale_factor_function(std::move(scaleFactorFunction)){}

template<typename SourceIter, typename ModelPhotPtr>
std::map<decltype(std::declval<typename SourceIter::value_type>().getId()), double> CalculateScaleFactorMap::operator()(
    SourceIter source_begin,
    SourceIter source_end,
    const std::map<
        decltype(std::declval<typename SourceIter::value_type>().getId()), ModelPhotPtr>& model_phot_map) const{
    auto result_map = std::map<decltype(std::declval<typename SourceIter::value_type>().getId()), double>();

    for (; source_begin!=source_end; ++source_begin) {
      auto source_id = source_begin->getId();
      // Check that the source is one of the sources we have the best fit models for
      if (model_phot_map.count(source_id) == 0) {
        continue;
      }
      auto source_photometry = source_begin->template getAttribute<SourceCatalog::Photometry>();
      auto model_iterator = model_phot_map.at(source_id)->begin();

      double alpha = m_scale_factor_function(
          source_photometry->begin(),
          source_photometry->end(),
          std::move(model_iterator));

      result_map.emplace(std::make_pair(source_id, alpha));
    }

    return std::move(result_map);
  }


} // end of namespace PhzPhotometricCorrection
} // end of namespace Euclid

#endif // CALCULATESCALEFACTORMAP_ICPP
