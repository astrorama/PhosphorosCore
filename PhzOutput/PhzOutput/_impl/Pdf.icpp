/*  
 * Copyright (C) 2012-2020 Euclid Science Ground Segment    
 *  
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either version 3.0 of the License, or (at your option)  
 * any later version.  
 *  
 * This library is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more  
 * details.  
 *  
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  
 */  

/**
 * @file src/lib/PhzColumnHandlers/Pdf.cpp
 * @date 07/04/16
 * @author nikoapos
 */

#include <sstream>
#include "PhzOutput/PhzColumnHandlers/Pdf.h"

namespace Euclid {
namespace PhzOutput {
namespace ColumnHandlers {

namespace Pdf_impl {

template <int Parameter>
struct PdfColumnTraits;

template <>
struct PdfColumnTraits<PhzDataModel::ModelParameter::SED> {
  static std::string name_prefix() {return "SED";}
  static constexpr auto res_type = PhzDataModel::SourceResultType::SED_1D_PDF;
  static std::string makeStreamable(const XYDataset::QualifiedName& value) {
    return value.qualifiedName();
  }
};

template <>
struct PdfColumnTraits<PhzDataModel::ModelParameter::REDDENING_CURVE> {
  static std::string name_prefix() {return "REDDENING-CURVE";}
  static constexpr auto res_type = PhzDataModel::SourceResultType::RED_CURVE_1D_PDF;
  static std::string makeStreamable(const XYDataset::QualifiedName& value) {
    return value.qualifiedName();
  }
};

template <>
struct PdfColumnTraits<PhzDataModel::ModelParameter::EBV> {
  static std::string name_prefix() {return "EBV";}
  static constexpr auto res_type = PhzDataModel::SourceResultType::EBV_1D_PDF;
  using axis_type = PhzDataModel::ModelParameterTraits<PhzDataModel::ModelParameter::EBV>::type;
  static axis_type makeStreamable(axis_type value) {
    return value;
  }
};

template <>
struct PdfColumnTraits<PhzDataModel::ModelParameter::Z> {
  static std::string name_prefix() {return "Z";}
  static constexpr auto res_type = PhzDataModel::SourceResultType::Z_1D_PDF;
  using axis_type = PhzDataModel::ModelParameterTraits<PhzDataModel::ModelParameter::Z>::type;
  static axis_type makeStreamable(axis_type value) {
    return value;
  }
};

} // end of namespace Pdf_impl

template <int Parameter>
std::vector<Table::ColumnInfo::info_type> Pdf<Parameter>::getColumnInfoList() const {
  std::string col_name = Pdf_impl::PdfColumnTraits<Parameter>::name_prefix();
  col_name = col_name + "-1D-PDF";
  return std::vector<Table::ColumnInfo::info_type> {
    Table::ColumnInfo::info_type(col_name, typeid(std::vector<double>))
  };
}

template <int Parameter>
std::vector<Table::Row::cell_type> Pdf<Parameter>::convertResults(
                      const SourceCatalog::Source&,
                      const PhzDataModel::SourceResults& results) const {
  
  auto& pdf_1d = results.get<Pdf_impl::PdfColumnTraits<Parameter>::res_type>();
  std::vector<double> data {pdf_1d.begin(), pdf_1d.end()};
  
  // Note to developers:
  // We get the knots of the 1D PDF from the first source which is handled. All
  // the rest of the sources are assumed to have the same knots. NO TEST IS
  // CURRENTLY DONE TO CHECK THAT THIS IS TRUE.
  if (m_knots_comment.empty()) {
    std::stringstream comment {};
    comment << Pdf_impl::PdfColumnTraits<Parameter>::name_prefix() << "-BINS : {";
    for (auto& knot_value : pdf_1d.template getAxis<0>()) {
      comment << Pdf_impl::PdfColumnTraits<Parameter>::makeStreamable(knot_value) << ',';
    }
    comment.seekp(-1, comment.cur);
    comment << '}';
    m_knots_comment = comment.str();
  }
  
  return std::vector<Table::Row::cell_type> {std::move(data)};
}

template <int Parameter>
std::vector<std::string> Pdf<Parameter>::getComments() {
  return {m_knots_comment};
}

} /* namespace ColumnHandlers */
} /* namespace PhzOutput */
} /* namespace Euclid */



