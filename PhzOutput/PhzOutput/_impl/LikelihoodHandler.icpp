/** 
 * @file LikelihoodHandler.cpp
 * @date March 13, 2015
 * @author Nikolaos Apostolakos
 */

#include <vector>
#include <CCfits/CCfits>
#include "ElementsKernel/Exception.h"
#include "ElementsKernel/Logging.h"
#include "GridContainer/serialize.h"
#include "PhzUtils/FileUtils.h"

namespace fs = boost::filesystem;

namespace Euclid {
namespace PhzOutput {

static Elements::Logging logger = Elements::Logging::getLogger("PhzOutput");

template<PhzDataModel::SourceResultType GridMap>
LikelihoodHandler<GridMap>::LikelihoodHandler(boost::filesystem::path out_dir)
          : m_out_dir{std::move(out_dir)} {

  // Check directory and write permissions
  Euclid::PhzUtils::checkCreateDirectoryOnly(m_out_dir.string());

}

template<PhzDataModel::SourceResultType GridMap>
void LikelihoodHandler<GridMap>::handleSourceOutput(
                                          const SourceCatalog::Source& source,
                                          const PhzDataModel::SourceResults& results) {
  std::string id = std::to_string(source.getId());
  std::string filename = (m_out_dir/(id+".fits")).string();
  fs::remove(filename);
  auto& posteriors_map = results.getResult<GridMap>();
  
  for (auto& pair : posteriors_map) {
    GridContainer::gridFitsExport(filename, pair.first, pair.second);
    CCfits::FITS fits (filename, CCfits::Write);
    auto& array_hdu = fits.extension(fits.extension().size() - pair.second.axisNumber());
    array_hdu.addKey("ID", source.getId(), "");
  }
  
  logger.debug() << "Created file " << filename << " for source " << id;
}

} // end of namespace PhzOutput
} // end of namespace Euclid
