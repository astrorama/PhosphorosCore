/**
 * @file GridSampler.icpp
 * @date 18/08/2020
 * @author DubathF
 **/

#include "ElementsKernel/Exception.h"
#include "ElementsKernel/Logging.h"
#include "GridContainer/serialize.h"
#include "MathUtils/PDF/NdSampler.h"
#include "MathUtils/PDF/NdSamplerFromGrid.h"
#include "NdArray/NdArray.h"
#include "NdArray/Operations.h"
#include "PhzDataModel/DoubleGrid.h"
#include "PhzDataModel/PhzModel.h"
#include "PhzOutput/GridSampler.h"
#include "PhzUtils/FileUtils.h"
#include "boost/lexical_cast.hpp"
#include <CCfits/CCfits>
#include <algorithm>  // std::max
#include <random>
#include <vector>

namespace Euclid {
namespace PhzOutput {

static Elements::Logging loggerPhzGridSampler = Elements::Logging::getLogger("GridSampler");



const std::map<std::string, NdArray::NdArray<double>> convertModelGrid(const std::map<std::string, PhzDataModel::PhotometryGrid>& model_grid) {
	std::map<std::string, NdArray::NdArray<double>> correction_factor_map{};
	for (auto& pair : model_grid) {

	    auto&  axis = pair.second.getAxesTuple();
		loggerPhzGridSampler.debug() << "Converting grid region '" << pair.first <<"' with dim : "<<std::get<0>(axis).size() <<"x"<<std::get<1>(axis).size()<<"x"<<std::get<2>(axis).size()<<"x"<<std::get<3>(axis).size();

		auto correction_factor_array = NdArray::NdArray<double>{std::get<3>(axis).size(),
			                                                 std::get<2>(axis).size(),
															 std::get<1>(axis).size(),
															 std::get<0>(axis).size()};
		for (size_t sed_index = 0; sed_index < std::get<3>(axis).size(); ++sed_index) {
		   for (size_t red_index = 0; red_index < std::get<2>(axis).size(); ++red_index) {
		      for (size_t ebv_index = 0; ebv_index < std::get<1>(axis).size(); ++ebv_index) {
		        for (size_t z_index = 0; z_index <  std::get<0>(axis).size(); ++z_index) {
		        	auto correction_factor = (*pair.second(z_index, ebv_index, red_index, sed_index).begin()).error;
		        	//For retro-compatibility with existing grids
		        	if (correction_factor == 0){
		        	    correction_factor = 1.0;
		        	}
		        	correction_factor_array.at(sed_index, red_index, ebv_index, z_index) = correction_factor;
		        }
		      }
		   }
		}
		correction_factor_map.emplace(pair.first, std::move(correction_factor_array));
	}
	return correction_factor_map;
}

template <PhzDataModel::RegionResultType GridType>
GridSampler<GridType>::GridSampler(const std::map<std::string, PhzDataModel::PhotometryGrid>& model_grid): m_correction_factor_map{convertModelGrid(model_grid)} {

}

template <PhzDataModel::RegionResultType GridType>
std::string GridSampler<GridType>::createComment(const PhzDataModel::SourceResults& results) {
  std::stringstream comment{};
  comment << "MODEL-GRID : {";
  size_t region_index = 0;
  for (auto& pair : results.get<PhzDataModel::SourceResultType::REGION_RESULTS_MAP>()) {

    // loggerPhzGridSampler.info() << "Build comment for region  "<<pair.first;

    comment << "\"" << pair.first << "\": {\"REGION_INDEX\":" << region_index << ",";
    auto&  grid  = pair.second.get<GridType>();
    auto&  axis  = grid.getAxesTuple();
    size_t index = 0;

    auto& red_axis = std::get<2>(axis);
    comment << "\"REDDENING_CURVE\":{";
    index = 0;
    for (auto& knot_value : red_axis) {
      comment << "\"" << index << "\":\"" << knot_value << "\",";
      ++index;
    }
    comment.seekp(-1, comment.cur);
    comment << "},";

    auto& sed_axis = std::get<3>(axis);
    comment << "\"SED\":{";
    index = 0;
    for (auto& knot_value : sed_axis) {
      comment << "\"" << index << "\":\"" << knot_value << "\",";
      ++index;
    }
    comment.seekp(-1, comment.cur);
    comment << "}";
    comment << "}";
    ++region_index;
  }
  comment << "}";

  return comment.str();
}

template <PhzDataModel::RegionResultType GridType>
double GridSampler<GridType>::computeEnclosingVolumeOfCells(const PhzDataModel::RegionResults& results) const {
  auto&  grid           = results.get<GridType>();
  auto&  axis           = grid.getAxesTuple();
  double total_cell_vol = 0.;
  size_t index_1        = 1;
  for (size_t sed_index = 0; sed_index < std::get<3>(axis).size(); ++sed_index) {
    for (size_t red_index = 0; red_index < std::get<2>(axis).size(); ++red_index) {
      for (size_t ebv_index = 0; ebv_index < std::max(index_1, std::get<1>(axis).size() - 1); ++ebv_index) {
        for (size_t z_index = 0; z_index < std::max(index_1, std::get<0>(axis).size() - 1); ++z_index) {
          double delta_z = 1.0;
          double delta_e = 1.0;
          double v_00    = exp(grid(z_index, ebv_index, red_index, sed_index));
          double v_10    = v_00;
          double v_01    = v_00;
          double v_11    = v_00;
          if (std::get<0>(axis).size() > 1) {
            v_10    = exp(grid(z_index + 1, ebv_index, red_index, sed_index));
            v_11    = v_10;
            delta_z = std::get<0>(axis)[z_index + 1] - std::get<0>(axis)[z_index];
          }

          if (std::get<1>(axis).size() > 1) {
            v_01    = exp(grid(z_index, ebv_index + 1, red_index, sed_index));
            v_11    = v_01;
            delta_e = std::get<1>(axis)[ebv_index + 1] - std::get<1>(axis)[ebv_index];
          }

          if (std::get<0>(axis).size() > 1 && std::get<1>(axis).size() > 1) {
            v_11 = exp(grid(z_index + 1, ebv_index + 1, red_index, sed_index));
          }

          double value = 0.25 * (v_00 + v_10 + v_01 + v_11) * delta_z * delta_e;

          total_cell_vol += value;
        }
      }
    }
  }

  return total_cell_vol;
}

static std::pair<std::unique_ptr<MathUtils::InterpN<double, double, int, int>>, std::unique_ptr<MathUtils::InterpN<double, double, int, int>>>
createInterpolatorFromGrid(const PhzDataModel::DoubleGrid& grid,
		                   const NdArray::NdArray<double>& correction_factor_map,
		                   const std::vector<double>& z_axis,
                           const std::vector<double>& ebv_axis,
						   const std::vector<int>& red_axis,
                           const std::vector<int>& sed_axis) {
  auto                     knots = std::make_tuple(z_axis, ebv_axis, red_axis, sed_axis);
  std::vector<size_t>      values_shape{sed_axis.size(), red_axis.size(), ebv_axis.size(), z_axis.size()};
  NdArray::NdArray<double> values(values_shape, grid.begin(), grid.end());

  NdArray::NdArray<double> multiplied = NdArray::multiplyElements(values, correction_factor_map);

  return std::make_pair(
		  Euclid::make_unique<MathUtils::InterpN<double, double, int, int>>(knots, std::move(values), true),
		  Euclid::make_unique<MathUtils::InterpN<double, double, int, int>>(std::move(knots), std::move(multiplied), true));
}

std::unique_ptr<MathUtils::NdSampler<double, double, int, int>>
createSamplerFromGrid(const PhzDataModel::DoubleGrid& grid, const std::vector<double>& z_axis, const std::vector<double>& ebv_axis,
                      const std::vector<int>& red_axis, const std::vector<int>& sed_axis) {
  auto                     knots = std::make_tuple(z_axis, ebv_axis, red_axis, sed_axis);
  std::vector<size_t>      pdf_shape{sed_axis.size(), red_axis.size(), ebv_axis.size(), z_axis.size()};
  NdArray::NdArray<double> pdf(pdf_shape, grid.begin(), grid.end());
  std::transform(pdf.begin(), pdf.end(), pdf.begin(), [](double v) { return std::exp(v); });
  return Euclid::make_unique<MathUtils::NdSampler<double, double, int, int>>(std::move(knots), std::move(pdf));
}

template <PhzDataModel::RegionResultType GridType>
std::vector<GridSample>
GridSampler<GridType>::drawSample(std::size_t sample_number, const std::map<std::string, double>& region_volume_map,
                                  const std::map<std::string, PhzDataModel::RegionResults>& results, std::mt19937& gen) {
  // Prepare a sampler per region
  using SamplerPtrType       = std::unique_ptr<MathUtils::NdSampler<double, double, int, int>>;
  using InterpolationPtrType = std::unique_ptr<MathUtils::InterpN<double, double, int, int>>;

  std::vector<SamplerPtrType>                                        samplers;
  std::vector<std::pair<InterpolationPtrType, InterpolationPtrType>> scaling_grid;
  std::vector<std::string>                                           region_names;
  std::vector<double>                                                r_cumulative;
  std::vector<std::vector<XYDataset::QualifiedName>> sed_names, red_names;
  samplers.reserve(results.size());
  scaling_grid.reserve(results.size());
  region_names.reserve(results.size());
  r_cumulative.reserve(results.size());

  double total_volume = 0.;
  for (auto& pair : results) {
    auto& grid       = pair.second.get<GridType>();
    auto& scale_grid = pair.second.get<PhzDataModel::RegionResultType::SCALE_FACTOR_GRID>();

    // Get the axes of the grid
    // Note that the qualified name is handled as an integer (its index) instead
    auto&               red_axis = grid.template getAxis<2>();
    auto&               sed_axis = grid.template getAxis<3>();
    std::vector<double> z_axis(grid.template getAxis<0>().begin(), grid.template getAxis<0>().end());
    std::vector<double> ebv_axis(grid.template getAxis<1>().begin(), grid.template getAxis<1>().end());
    std::vector<int>    red_idxs(red_axis.size());
    std::vector<int>    sed_idxs(sed_axis.size());

    std::iota(red_idxs.begin(), red_idxs.end(), 0);
    std::iota(sed_idxs.begin(), sed_idxs.end(), 0);

    sed_names.emplace_back(sed_axis.begin(), sed_axis.end());
    red_names.emplace_back(red_axis.begin(), red_axis.end());

    // Build sampler
    samplers.emplace_back(std::move(createSamplerFromGrid(grid, z_axis, ebv_axis, red_idxs, sed_idxs)));

    loggerPhzGridSampler.info() << "Prepare sampling for region with name :"<<pair.first;
    loggerPhzGridSampler.info() << "sclae grid dim :"<<z_axis.size() <<"x"<<ebv_axis.size()<<"x"<<red_idxs.size()<<"x"<<sed_idxs.size();


    // Build scale interpolator
    scaling_grid.emplace_back(std::move(createInterpolatorFromGrid(scale_grid, m_correction_factor_map.at(pair.first), z_axis, ebv_axis, red_idxs, sed_idxs)));

    // Information about the grid
    region_names.emplace_back(pair.first);
    total_volume += region_volume_map.at(pair.first);
    r_cumulative.emplace_back(total_volume);
  }
  std::uniform_real_distribution<> distrib_region(0, total_volume);

  // Reserve output
  std::vector<GridSample> sample(sample_number);

  // To make things faster, select regions first, then take all needed samples within region
  std::vector<size_t> draws_per_region(region_names.size());
  for (size_t i = 0; i < sample_number; ++i) {
    double region_draw  = distrib_region(gen);
    int    region_index = std::lower_bound(r_cumulative.begin(), r_cumulative.end(), region_draw) - r_cumulative.begin();
    ++draws_per_region[region_index];
  }

  // Draws samples from regions
  size_t i = 0;
  for (size_t region_index = 0; region_index < draws_per_region.size(); ++region_index) {
    int ndraws = draws_per_region[region_index];
    if (ndraws == 0)
      continue;

    // Use the sampler for that region for all except alpha
    auto output = samplers[region_index]->draw(ndraws, gen);


    for (auto& d : output) {
      auto& s        = sample[i++];
      s.region_index = region_index;

      std::tie(s.z, s.ebv, s.red_index, s.sed_index) = d;
      s.sed                                          = sed_names[region_index][s.sed_index];

      // Compute alpha and luminosity from its grids
	  auto& alpha_lum_pair = scaling_grid[s.region_index];
      s.alpha = (*(alpha_lum_pair.first))(s.z, s.ebv, s.red_index, s.sed_index);
      s.obs_lum =(*(alpha_lum_pair.second))(s.z, s.ebv, s.red_index, s.sed_index);
    }
  }

  // Done!
  return sample;
}

}  // end of namespace PhzOutput
}  // end of namespace Euclid
