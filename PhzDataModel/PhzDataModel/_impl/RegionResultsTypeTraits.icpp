/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * @file RegionResultsTypeTraits.icpp
 * @author nikoapos
 */

#ifndef REGIONRESULTSTYPETRAITS_ICPP
#define REGIONRESULTSTYPETRAITS_ICPP

#include <functional>

#include "SourceCatalog/SourceAttributes/Photometry.h"
#include "PhzDataModel/PhotometryGrid.h"
#include "PhzDataModel/DoubleGrid.h"
#include "PhzDataModel/DoubleListGrid.h"
#include "PhzDataModel/Pdf1D.h"

namespace Euclid {
namespace PhzDataModel {


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                              T == RegionResultType::MODEL_GRID_REFERENCE
                       >::type> {
  using type = std::reference_wrapper<const PhotometryGrid>;
};

template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                              T == RegionResultType::ORIGINAL_MODEL_GRID_REFERENCE
                      >::type> {
  using type = std::reference_wrapper<const PhotometryGrid>;
};

template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                              T == RegionResultType::SOURCE_PHOTOMETRY_REFERENCE
                       >::type> {
  using type = std::reference_wrapper<const SourceCatalog::Photometry>;
};


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                              T == RegionResultType::FIXED_REDSHIFT_MODEL_GRID
                       >::type> {
  using type = PhotometryGrid;
};


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                              T == RegionResultType::LIKELIHOOD_NORMALIZATION_LOG ||
                              T == RegionResultType::NORMALIZATION_LOG
                       >::type> {
  using type = double;
};


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                              T == RegionResultType::BEST_MODEL_ITERATOR ||
                              T == RegionResultType::BEST_LIKELIHOOD_MODEL_ITERATOR
                       >::type> {
  using type = DoubleGrid::iterator;
};


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                              T == RegionResultType::SCALE_FACTOR_GRID ||
                              T == RegionResultType::SIGMA_SCALE_FACTOR_GRID ||
                              T == RegionResultType::LIKELIHOOD_LOG_GRID ||
                              T == RegionResultType::POSTERIOR_LOG_GRID ||
                              T == RegionResultType::LIKELIHOOD_GRID ||
                              T == RegionResultType::POSTERIOR_GRID
                       >::type> {
  using type = DoubleGrid;
};

template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                              T == RegionResultType::LIKELIHOOD_SCALING_LOG_GRID ||
                              T == RegionResultType::POSTERIOR_SCALING_LOG_GRID ||
                              T == RegionResultType::LIKELIHOOD_SCALING_GRID ||
                              T == RegionResultType::POSTERIOR_SCALING_GRID
                       >::type> {
  using type = DoubleListGrid;
};


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                                    T == RegionResultType::SED_1D_PDF ||
                                    T == RegionResultType::LIKELIHOOD_SED_1D_PDF
                             >::type> {
  using type = PhzDataModel::Pdf1DParam<ModelParameter::SED>;
};


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                                    T == RegionResultType::RED_CURVE_1D_PDF ||
                                    T == RegionResultType::LIKELIHOOD_RED_CURVE_1D_PDF
                             >::type> {
  using type = PhzDataModel::Pdf1DParam<ModelParameter::REDDENING_CURVE>;
};


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                                    T == RegionResultType::EBV_1D_PDF ||
                                    T == RegionResultType::LIKELIHOOD_EBV_1D_PDF
                             >::type> {
  using type = PhzDataModel::Pdf1DParam<ModelParameter::EBV>;
};


template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                                    T == RegionResultType::Z_1D_PDF ||
                                    T == RegionResultType::LIKELIHOOD_Z_1D_PDF
                             >::type> {
  using type = PhzDataModel::Pdf1DParam<ModelParameter::Z>;
};

template <RegionResultType T>
struct TypedEnumTraits<RegionResultType, T, typename std::enable_if<
                                    T == RegionResultType::FLAGS ||
                                    T == RegionResultType::SAMPLE_SCALE_FACTOR
                             >::type> {
  using type = std::map<std::string, bool>;
};


} /* namespace PhzDataModel */
} /* namespace Euclid */

#endif /* REGIONRESULTSTYPETRAITS_ICPP */

