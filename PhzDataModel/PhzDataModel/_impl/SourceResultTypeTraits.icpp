/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * @file SourceResultTypeTraits.icpp
 * @author nikoapos
 */

#include <type_traits>
#include <map>
#include <string>
#include "PhzDataModel/PhotometryGrid.h"
#include "PhzDataModel/Pdf1D.h"
#include "PhzDataModel/RegionResults.h"

namespace Euclid {
namespace PhzDataModel {


template <SourceResultType T>
struct TypedEnumTraits<SourceResultType, T, typename std::enable_if<
                                    T == SourceResultType::BEST_LIKELIHOOD_MODEL_ITERATOR ||
                                    T == SourceResultType::BEST_MODEL_ITERATOR
                             >::type> {
  using type = PhotometryGrid::const_iterator;
};


template <SourceResultType T>
struct TypedEnumTraits<SourceResultType, T, typename std::enable_if<
                                    T == SourceResultType::LOG_1D_PDF_NORM ||
                                    T == SourceResultType::BEST_MODEL_SCALE_FACTOR ||
                                    T == SourceResultType::BEST_MODEL_POSTERIOR_LOG
                             >::type> {
  using type = double;
};


template <SourceResultType T>
struct TypedEnumTraits<SourceResultType, T, typename std::enable_if<
                                    T == SourceResultType::SED_1D_PDF
                             >::type> {
  using type = PhzDataModel::Pdf1DParam<ModelParameter::SED>;
};


template <SourceResultType T>
struct TypedEnumTraits<SourceResultType, T, typename std::enable_if<
                                    T == SourceResultType::RED_CURVE_1D_PDF
                             >::type> {
  using type = PhzDataModel::Pdf1DParam<ModelParameter::REDDENING_CURVE>;
};


template <SourceResultType T>
struct TypedEnumTraits<SourceResultType, T, typename std::enable_if<
                                    T == SourceResultType::EBV_1D_PDF
                             >::type> {
  using type = PhzDataModel::Pdf1DParam<ModelParameter::EBV>;
};


template <SourceResultType T>
struct TypedEnumTraits<SourceResultType, T, typename std::enable_if<
                                    T == SourceResultType::Z_1D_PDF
                             >::type> {
  using type = PhzDataModel::Pdf1DParam<ModelParameter::Z>;
};


template <SourceResultType T>
struct TypedEnumTraits<SourceResultType, T, typename std::enable_if<
                                    T == SourceResultType::REGION_RESULTS_MAP
                             >::type> {
  using type = std::map<std::string, RegionResults>;
};


} /* namespace PhzDataModel */
} /* namespace Euclid */
