/**
 * @file BayesianMarginalizationFunctor.icpp
 * @date March 24, 2015
 * @author Nikolaos Apostolakos
 */

#include <algorithm>
#include "PhzLikelihood/NumericalAxisCorrection.h"
#include "PhzLikelihood/SumMarginalizationFunctor.h"
#include "PhzLikelihood/Pdf1DTraits.h"

namespace Euclid {
namespace PhzLikelihood {

namespace BayesianMarginalizationFunctor_impl {


template <int FinalAxis, int I=0>
struct NumercalAxisCorrectionAdder {
  
  template <typename T = PhzDataModel::DoubleGrid::axis_type<I>>
  static void addCorrections(std::map<int, typename BayesianMarginalizationFunctor<FinalAxis>::AxisCorrection>& axes_corr,
                             typename std::enable_if<std::is_arithmetic<T>::value>::type* = 0) {
    axes_corr[I] = NumericalAxisCorrection<I> {};
    NumercalAxisCorrectionAdder<FinalAxis, I+1>::addCorrections(axes_corr);
  }
  
  template <typename T = PhzDataModel::DoubleGrid::axis_type<I>>
  static void addCorrections(std::map<int, typename BayesianMarginalizationFunctor<FinalAxis>::AxisCorrection>& axes_corr,
                             typename std::enable_if<!std::is_arithmetic<T>::value>::type* = 0) {
    // Non numerical axis, do not add correction
    NumercalAxisCorrectionAdder<FinalAxis, I+1>::addCorrections(axes_corr);
  }
  
};

template <int FinalAxis>
struct NumercalAxisCorrectionAdder<FinalAxis, PhzDataModel::DoubleGrid::axisNumber()> {
  
  static void addCorrections(std::map<int, typename BayesianMarginalizationFunctor<FinalAxis>::AxisCorrection>&) {
    // Do nothing here
  }
  
};

}


template <int FinalAxis>
BayesianMarginalizationFunctor<FinalAxis>::BayesianMarginalizationFunctor() {
  BayesianMarginalizationFunctor_impl::NumercalAxisCorrectionAdder<FinalAxis>::addCorrections(m_numerical_axes_corr);
  for (size_t i = 0; i < PhzDataModel::DoubleGrid::axisNumber(); ++i) {
    m_custom_axes_corr[i].clear();
  }
}


template <int FinalAxis>
void BayesianMarginalizationFunctor<FinalAxis>::operator()(PhzDataModel::RegionResults& results) const {
  
  // Get the posterior grid from the passed object
  auto& posterior_grid = results.get<PhzDataModel::RegionResultType::POSTERIOR_GRID>();
  
  // Make a copy of the posterior grid in a new results object, which will be
  // passed to a SumMarginalizationFunctor. We need a copy anyways, because we
  // will modify it.
  PhzDataModel::RegionResults temp_results {};
  auto& posterior_copy = temp_results.set<PhzDataModel::RegionResultType::POSTERIOR_GRID>(posterior_grid.getAxesTuple());
  std::copy(posterior_grid.begin(), posterior_grid.end(), posterior_copy.begin());
  
  // Apply all the axes corrections
  for (auto& pair : m_numerical_axes_corr) {
    if (pair.first == FinalAxis) {
      continue;
    }
    pair.second(posterior_copy);
  }
  
  for (size_t i = 0; i < PhzDataModel::DoubleGrid::axisNumber(); ++i) {
    if (i == FinalAxis) {
      continue;
    }
    for (auto& corr : m_custom_axes_corr.at(i)) {
      corr(posterior_copy);
    }
  }

  // Calculate the 1D PDF as a simple SUM using a SumMarginalizationFunctor
  SumMarginalizationFunctor<FinalAxis> sum_marg {PhzDataModel::GridType::POSTERIOR};
  sum_marg(temp_results);
  
  // Copy the 1D PDF to our results
  auto& temp_pdf = temp_results.get<Pdf1DTraits<FinalAxis>::PdfRes>();
  results.set<Pdf1DTraits<FinalAxis>::PdfRes>(std::move(temp_pdf));
}


} // end of namespace PhzLikelihood
} // end of namespace Euclid
