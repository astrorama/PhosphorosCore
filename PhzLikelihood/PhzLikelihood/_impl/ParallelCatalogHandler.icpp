/**
 * @file ParallelCatalogHandler.icpp
 * @date February 27, 2015
 * @author Nikolaos Apostolakos
 */

#include <vector>
#include <atomic>
#include <future>
#include <thread>
#include <chrono>
#include "ElementsKernel/Logging.h"

namespace Euclid {
namespace PhzLikelihood {

// This is a helper class which is keeping the results for a single source
struct ResultType {
  ResultType(const SourceCatalog::Source& source,
             SourcePhzFunctor::result_type results)
        : source(source), results(std::move(results)) { }
  ResultType(ResultType&&) = default;
  const SourceCatalog::Source& source;
  SourcePhzFunctor::result_type results;
};

// This is a helper class which handles the execution of a part of the catalog.
template <typename SourceIter>
class ParallelJob {

public:

  ParallelJob(const CatalogHandler& handler, SourceIter begin,
              SourceIter end, std::atomic<size_t>& progress)
        : handler(handler), begin(begin), end(end), m_progress(progress) { }

  std::vector<ResultType> operator()() {
    std::vector<ResultType> result;
    Output output {result, m_progress};
    handler.handleSources(begin, end, output);
    return result;
  }

private:

  class Output : public PhzOutput::OutputHandler {
  public :
    Output(std::vector<ResultType>& result_vector, std::atomic<size_t>& progress) : m_result_vector(result_vector), m_progress(progress) {}
    void handleSourceOutput(const SourceCatalog::Source& source,
                            const PhzOutput::OutputHandler::result_type& results) override {
      // We need to make a copy of the results, because they will be handled
      // by a different thread when the refered object will be already deleted
      auto& pdf = std::get<1>(results);
      PhzDataModel::Pdf1D pdf_copy {pdf.getAxis<0>()};
      for (size_t i=0; i<pdf.size(); ++i) {
        pdf_copy(i) = pdf(i);
      }

      auto& likelihood_map = std::get<2>(results);
      std::map<std::string, PhzDataModel::LikelihoodGrid> likelihood_map_copy {};
      for (auto& pair : likelihood_map) {
        PhzDataModel::LikelihoodGrid lieklihood_copy {pair.second.getAxesTuple()};
        auto likelihood_iter = pair.second.begin();
        auto likelihood_copy_iter = lieklihood_copy.begin();
        for (; likelihood_iter!=pair.second.end(); ++likelihood_iter, ++likelihood_copy_iter) {
          *likelihood_copy_iter = *likelihood_iter;
        }
        likelihood_map_copy.emplace(std::make_pair(pair.first, std::move(lieklihood_copy)));
      }

      auto& posteriors_map = std::get<3>(results);
      std::map<std::string, PhzDataModel::LikelihoodGrid> posteriors_map_copy { };
      for (auto& pair : posteriors_map) {
        PhzDataModel::LikelihoodGrid posterior_copy { pair.second.getAxesTuple() };
        auto posterior_iter = pair.second.begin();
        auto posterior_copy_iter = posterior_copy.begin();
        for (; posterior_iter != pair.second.end();
            ++posterior_iter, ++posterior_copy_iter) {
          *posterior_copy_iter = *posterior_iter;
        }
        posteriors_map_copy.emplace(
            std::make_pair(pair.first, std::move(posterior_copy)));
      }

      PhzOutput::OutputHandler::result_type results_copy {
        std::get<0>(results),
        std::move(pdf_copy),
        std::move(likelihood_map_copy),
        std::move(posteriors_map_copy),
        std::get<4>(results),
        std::get<5>(results),
        std::get<6>(results),
      };
      m_result_vector.push_back(ResultType{source, std::move(results_copy)});
      ++m_progress;
    }
  private:
    std::vector<ResultType>& m_result_vector;
    std::atomic<size_t>& m_progress;
  };

  const PhzLikelihood::CatalogHandler& handler;
  SourceIter begin;
  SourceIter end;
  std::atomic<size_t>& m_progress;

};

template<typename SourceIter>
void ParallelCatalogHandler::handleSources(SourceIter source_begin, SourceIter source_end,
                                           PhzOutput::OutputHandler& out_handler,
                                           ProgressListener progress_listener) const {
  auto logger = Elements::Logging::getLogger("ParallelCatalogHandler");
  std::vector<std::future<std::vector<ResultType>>> futures;

  std::atomic<size_t> progress {0};
  size_t total_sources = source_end - source_begin;
  logger.info() << "Processing " << total_sources << " sources";
  uint threads = std::thread::hardware_concurrency();
  logger.info() << "Using " << threads << " threads";
  uint step = total_sources / threads;

  for (uint i=0; i< threads; ++i) {
    auto begin = source_begin + i*step;
    auto end = ((i+1) == threads) ? source_end : source_begin + (i+1)*step;
    logger.info() << "Starting thread " << (i+1) << " for sources ["
                  << begin->getId() << ',' << (end-1)->getId() << ']';
    futures.push_back(std::async(std::launch::async, ParallelJob<SourceIter>{m_catalog_handler, begin, end, progress}));
  }

  if (progress_listener) {
    progress_listener(0, total_sources);
    while (progress < total_sources) {
      std::this_thread::sleep_for(std::chrono::milliseconds(100));
      progress_listener(progress, total_sources);
    }
    progress_listener(total_sources, total_sources);
  }

  logger.info() << "Thread jobs finished. Handling output...";
  for (auto& f : futures) {
    for (auto& result : f.get()) {
      out_handler.handleSourceOutput(result.source, result.results);
    }
  }
}

}
}
