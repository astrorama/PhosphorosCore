/**
 * @file ParallelCatalogHandler.icpp
 * @date February 27, 2015
 * @author Nikolaos Apostolakos
 */

#include <vector>
#include <atomic>
#include <future>
#include <thread>
#include <chrono>
#include "ElementsKernel/Logging.h"
#include "AlexandriaKernel/ThreadPool.h"
#include "PhzOutput/MultithreadHandler.h"
#include "PhzUtils/Multithreading.h"

namespace Euclid {
namespace PhzLikelihood {

namespace ParallelCatalogHandler_Impl {

// This is a helper class which handles the execution of a single source
template <typename SourceIter>
class SingleSourceTask {

public:

  SingleSourceTask(const CatalogHandler& handler, SourceIter iter,
          PhzOutput::OutputHandler& output_handler, std::atomic<uint>& done_counter)
        : handler(handler), iter(iter),m_output_handler(output_handler), m_done_counter(done_counter) { }

  void operator()() {
    DoneUpdater done_updater {m_done_counter};
    auto begin = iter;
    auto end = iter;
    ++end;
    handler.handleSources(begin, end, m_output_handler);
  }

private:
  
  class DoneUpdater {
  public:
    DoneUpdater(std::atomic<uint>& m_done_counter) : m_done_counter(m_done_counter) { }
    virtual ~DoneUpdater() {++m_done_counter;}
  private:
    std::atomic<uint>& m_done_counter;
  };

  const PhzLikelihood::CatalogHandler& handler;
  SourceIter iter;
  PhzOutput::OutputHandler& m_output_handler;
  std::atomic<uint>& m_done_counter;

};

} // end of namespace ParallelCatalogHandler_Impl

template<typename SourceIter>
void ParallelCatalogHandler::handleSources(SourceIter source_begin, SourceIter source_end,
                                           PhzOutput::OutputHandler& out_handler,
                                           ProgressListener progress_listener) const {
  auto logger = Elements::Logging::getLogger("ParallelCatalogHandler");
  std::vector<std::future<void>> futures;

  std::atomic<size_t> progress {0};
  std::atomic<uint> done_counter {0};
  
  std::vector<decltype(std::declval<SourceCatalog::Source>().getId())> source_id_order {};
  for (auto it = source_begin; it != source_end; ++it) {
    source_id_order.emplace_back(it->getId());
  }
  auto total_sources = source_id_order.size();
  logger.info() << "Processing " << total_sources << " sources";
  
  uint threads = PhzUtils::getThreadNumber();
  if (source_end - source_begin < threads) {
    threads = source_end - source_begin;
  }
  logger.info() << "Using " << threads << " threads";
  
  PhzOutput::MultithreadHandler multithread_handler {out_handler, progress, source_id_order};

  ThreadPool pool {threads};
  for (auto it = source_begin; it != source_end; ++it) {
    pool.submit(ParallelCatalogHandler_Impl::SingleSourceTask<SourceIter>{
      m_catalog_handler, it, multithread_handler, done_counter
    });
  }

  if (progress_listener) {
    progress_listener(0, total_sources);
    while (done_counter < total_sources) {
      std::this_thread::sleep_for(std::chrono::milliseconds(100));
      progress_listener(progress, total_sources);
    }
    progress_listener(total_sources, total_sources);
  }
  
  // Wait until all the tasks in the pool are finished
  pool.block();

}

}
}
