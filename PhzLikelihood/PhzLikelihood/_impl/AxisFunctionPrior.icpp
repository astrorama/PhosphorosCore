/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment    
 *  
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either version 3.0 of the License, or (at your option)  
 * any later version.  
 *  
 * This library is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more  
 * details.  
 *  
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  
 */

/* 
 * @file AxisFunctionPrior.icpp
 * @author nikoapos
 */

namespace Euclid {
namespace PhzLikelihood {

template <int AxisIndex>
AxisFunctionPrior<AxisIndex>::AxisFunctionPrior(std::unique_ptr<MathUtils::Function> prior_func)
        : m_prior_func {std::move(prior_func)} {
}
  
template <int AxisIndex>
void AxisFunctionPrior<AxisIndex>::operator()(PhzDataModel::RegionResults& results) const {
  double min_value = std::exp(std::numeric_limits<double>::lowest());
  auto& posterior_grid = results.get<PhzDataModel::RegionResultType::POSTERIOR_LOG_GRID>();
  auto& axis = posterior_grid.getAxis<AxisIndex>();
  for (std::size_t i = 0; i < axis.size(); ++i) {
    auto prior = (*m_prior_func)(axis[i]);
    if (prior <= min_value) {
      for (auto& cell : posterior_grid.fixAxisByIndex<AxisIndex>(i)) {
        cell = std::numeric_limits<double>::min();
      }
    } else {
      auto log_prior = std::log(prior);
      for (auto& cell : posterior_grid.fixAxisByIndex<AxisIndex>(i)) {
        cell = cell + log_prior;
      }
    }
  }
  if (results.get<PhzDataModel::RegionResultType::SAMPLE_SCALE_FACTOR>()) {
       auto& posterior_sampled_grid = results.get<PhzDataModel::RegionResultType::POSTERIOR_SCALING_LOG_GRID>();
       for (std::size_t i = 0; i < axis.size(); ++i) {
           auto prior = (*m_prior_func)(axis[i]);
           if (prior <= min_value) {
             for (auto& cell : posterior_sampled_grid.fixAxisByIndex<AxisIndex>(i)) {
               for (auto sample_iter = cell.begin(); sample_iter != cell.end(); ++sample_iter) {
                 *sample_iter = std::numeric_limits<double>::min();
               }
             }
           } else {
             auto log_prior = std::log(prior);
             for (auto& cell : posterior_sampled_grid.fixAxisByIndex<AxisIndex>(i)) {
               for (auto sample_iter = cell.begin(); sample_iter != cell.end(); ++sample_iter) {
                 *sample_iter += log_prior;
               }
             }
           }
       }
  }
}

} /* namespace PhzLikelihood */
} /* namespace Euclid */
